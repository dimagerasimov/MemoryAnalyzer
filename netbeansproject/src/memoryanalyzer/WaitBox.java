/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memoryanalyzer;

import java.awt.GraphicsEnvironment;
import java.awt.Point;
import javax.swing.JFrame;
import memoryanalyzer.WaitBoxThread.WaitBoxFeedback;

/**
 *
 * @author master
 */
public class WaitBox extends javax.swing.JFrame {

    /**
     * Creates new form WaitBox
     * @param retJFrame
     */
    public WaitBox() {
        initComponents();
        setCenterPosition();
    }
    
    private void setCenterPosition() {
        Point p = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        this.setLocation(p.x - this.getWidth() / 2, p.y - this.getHeight() / 2);
    }
    
    public void updateProgress() {
        if(waitBoxFeedback != null) {    
            jProgressBar.setValue(waitBoxFeedback.progress);
        }
    }
    
    public boolean start(Thread thread_new) {
        if(thread_new == null) {
            return false;
        }
        else {
            // Create new feedback for WaitBoxThread 
            waitBoxFeedback = new WaitBoxFeedback();
            // Create and run a thread WaitBoxThread
            WaitBoxThread waitBoxThread = new WaitBoxThread(this, waitBoxFeedback, thread_new);
            waitBoxThread.start();

            // Disabled feedback with main form
            //retJFrame.setEnabled(false);
            //Run thread_new
            this.thread_new = thread_new;
            thread_new.start();
            return true;
        }
    }
    
    public void stop() {
        //Close this form
        this.setVisible(false);
        this.dispose();
    }
    
    private Thread thread_new;
    private WaitBoxFeedback waitBoxFeedback;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar = new javax.swing.JProgressBar();
        jLabelState = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Waiting");
        setCursor(new java.awt.Cursor(java.awt.Cursor.WAIT_CURSOR));
        setMaximumSize(new java.awt.Dimension(320, 70));
        setMinimumSize(new java.awt.Dimension(320, 70));
        setPreferredSize(new java.awt.Dimension(320, 70));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jProgressBar.setMaximumSize(new java.awt.Dimension(290, 20));
        jProgressBar.setMinimumSize(new java.awt.Dimension(290, 20));
        jProgressBar.setPreferredSize(new java.awt.Dimension(290, 20));

        jLabelState.setText("Capture info...");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelState)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabelState, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // Interrupt a background thread
        if(thread_new.getState() != Thread.State.TERMINATED) {
            thread_new.interrupt();
        }
    }//GEN-LAST:event_formWindowClosed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabelState;
    private javax.swing.JProgressBar jProgressBar;
    // End of variables declaration//GEN-END:variables
}
