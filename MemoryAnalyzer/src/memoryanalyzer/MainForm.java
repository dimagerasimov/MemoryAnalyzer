/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package memoryanalyzer;

import java.awt.Point;
import java.awt.GraphicsEnvironment;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import fast_chart.FastChart;
import analyzer.ViewerThread;
import common.MsgBox;
import common.WaitBox;
import common.GlobalVariables;
import crossplatform.Help;

/**
 *
 * @author master
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        // If user OS isn't supported then show message
        if(Help.GetOS().equals(Help.ERR_UNKNOWN_OS)) {
            errorUnknownSystem();
        }
        // Check: is pin installed? If yes then run the pin server
        pinServerProcess = null;
        if(!Help.isPinInstalled()) {
            new MsgBox(this, "Warning!", "Intel PIN is not installed!\n"
                    + "Local analysis is not available!",
                    MsgBox.ACTION_OK).setVisible(true);
        }
        else {
            try {
                pinServerProcess = Help.runPinServer();
            } catch(IOException ex) {
                new MsgBox(this, "Warning!", ex.getMessage(),
                        MsgBox.ACTION_OK).setVisible(true);
            }
        }
        // Init chooser
        initResultsChooser();
        // Initialization current chart as null
        chart = null;
        tmpResultsFileName = null;
        // Create special form for connection
        formConnectTo = new FormConnectTo(this, pinServerProcess != null);
        setCenterLocation();
    }
    
    public void updateChart(FastChart newChart) {
        chart = newChart;
        chart.setSize(jPanel4Chart.getSize());
        // If chart already was on a panel then remove it 
        jPanel4Chart.removeAll();
        // Revalidate a panel
        jPanel4Chart.revalidate();
        // Add new chart on a panel
        jPanel4Chart.add(chart);
        repaint();
    }
    
    public void clearChart() {
        deleteTmpResultsFile();
        chart = null;
        jPanel4Chart.removeAll();
        jPanel4Chart.revalidate();
        repaint();
    }

    public String getTmpResultsFileName() {
        tmpResultsFileName = Help.GetBinaryResultsPath();
        return tmpResultsFileName;
    }
    
    private void initResultsChooser() {
        String binaryFileExtension = Help.GetBinaryFileExtension();
        resultsChooser = new JFileChooser();
        resultsChooser.setMultiSelectionEnabled(false);
        FileNameExtensionFilter filterNameExtension;
        filterNameExtension = new FileNameExtensionFilter("Binary output (*"
            + binaryFileExtension + ")", binaryFileExtension.replaceAll("\\.", ""));
        resultsChooser.removeChoosableFileFilter(resultsChooser.getChoosableFileFilters()[0]);
        resultsChooser.addChoosableFileFilter(filterNameExtension);
    }
    
    private void errorUnknownSystem()
    {
        new MsgBox(this, "Error!", "Your operating system is not supported!",
            MsgBox.ACTION_CLOSE).setVisible(true);
    }
    
    private void setCenterLocation()
    {
        Point p = GraphicsEnvironment.getLocalGraphicsEnvironment().getCenterPoint();
        this.setLocation(p.x - this.getWidth() / 2, p.y - this.getHeight() / 2);
    }
    
    private void deleteTmpResultsFile() {
        if(tmpResultsFileName != null) {
            try {
                Files.deleteIfExists(Paths.get(tmpResultsFileName));
            } catch (IOException ex) {
                // DO NOTHING
            }
        }
        tmpResultsFileName = null;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jPanel4Chart = new javax.swing.JPanel();
        jMenuBar = new javax.swing.JMenuBar();
        jMenuFile = new javax.swing.JMenu();
        jMenuItemOpenApp = new javax.swing.JMenuItem();
        jMenuItemOpenResults = new javax.swing.JMenuItem();
        jMenuItemSaveBinFile = new javax.swing.JMenuItem();
        jMenuItemClose = new javax.swing.JMenuItem();
        jMenuItemExit = new javax.swing.JMenuItem();
        jMenuSettings = new javax.swing.JMenu();
        jMenuTimeline = new javax.swing.JMenu();
        jRadioButtonTimelineMode1 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonTimelineMode2 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonTimelineMode3 = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonTimelineMode4 = new javax.swing.JRadioButtonMenuItem();
        jMenuCharts = new javax.swing.JMenu();
        jMenuNumberOfCharts = new javax.swing.JMenu();
        jRadioButtonOneChart = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonTwoCharts = new javax.swing.JRadioButtonMenuItem();
        jMenuTypeOfCharts = new javax.swing.JMenu();
        jRadioButtonLineChart = new javax.swing.JRadioButtonMenuItem();
        jRadioButtonAreaChart = new javax.swing.JRadioButtonMenuItem();

        jMenuItem1.setText("jMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("MemoryAnalyzer");
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel4Chart.setPreferredSize(new java.awt.Dimension(700, 450));

        javax.swing.GroupLayout jPanel4ChartLayout = new javax.swing.GroupLayout(jPanel4Chart);
        jPanel4Chart.setLayout(jPanel4ChartLayout);
        jPanel4ChartLayout.setHorizontalGroup(
            jPanel4ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        jPanel4ChartLayout.setVerticalGroup(
            jPanel4ChartLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );

        jMenuFile.setText("File");

        jMenuItemOpenApp.setText("New Test...");
        jMenuItemOpenApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenAppActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpenApp);

        jMenuItemOpenResults.setText("Open Results...");
        jMenuItemOpenResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemOpenResultsActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemOpenResults);

        jMenuItemSaveBinFile.setText("Save Results as a Binary File...");
        jMenuItemSaveBinFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemSaveBinFileActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemSaveBinFile);

        jMenuItemClose.setText("Close Results");
        jMenuItemClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCloseActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemClose);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenuFile.add(jMenuItemExit);

        jMenuBar.add(jMenuFile);

        jMenuSettings.setText("Settings");

        jMenuTimeline.setText("Timeline period");

        jRadioButtonTimelineMode1.setSelected(true);
        jRadioButtonTimelineMode1.setText("Last 1 minute");
        jRadioButtonTimelineMode1.setEnabled(false);
        jRadioButtonTimelineMode1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonTimelineMode1StateChanged(evt);
            }
        });
        jMenuTimeline.add(jRadioButtonTimelineMode1);

        jRadioButtonTimelineMode2.setText("Last 2 minutes");
        jRadioButtonTimelineMode2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonTimelineMode2StateChanged(evt);
            }
        });
        jMenuTimeline.add(jRadioButtonTimelineMode2);

        jRadioButtonTimelineMode3.setText("Last 5 minutes");
        jRadioButtonTimelineMode3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonTimelineMode3StateChanged(evt);
            }
        });
        jMenuTimeline.add(jRadioButtonTimelineMode3);

        jRadioButtonTimelineMode4.setText("All time");
        jRadioButtonTimelineMode4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonTimelineMode4StateChanged(evt);
            }
        });
        jMenuTimeline.add(jRadioButtonTimelineMode4);

        jMenuSettings.add(jMenuTimeline);

        jMenuCharts.setText("Charts");

        jMenuNumberOfCharts.setText("Number of charts");

        jRadioButtonOneChart.setText("One chart");
        jRadioButtonOneChart.setToolTipText("Both graphics are placed to one chart");
        jRadioButtonOneChart.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonOneChartStateChanged(evt);
            }
        });
        jMenuNumberOfCharts.add(jRadioButtonOneChart);

        jRadioButtonTwoCharts.setSelected(true);
        jRadioButtonTwoCharts.setText("Two charts");
        jRadioButtonTwoCharts.setToolTipText("For every graphics there are own chart");
        jRadioButtonTwoCharts.setEnabled(false);
        jRadioButtonTwoCharts.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonTwoChartsStateChanged(evt);
            }
        });
        jMenuNumberOfCharts.add(jRadioButtonTwoCharts);

        jMenuCharts.add(jMenuNumberOfCharts);

        jMenuTypeOfCharts.setText("Type of charts");

        jRadioButtonLineChart.setText("Lines");
        jRadioButtonLineChart.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonLineChartStateChanged(evt);
            }
        });
        jMenuTypeOfCharts.add(jRadioButtonLineChart);

        jRadioButtonAreaChart.setSelected(true);
        jRadioButtonAreaChart.setText("Areas");
        jRadioButtonAreaChart.setEnabled(false);
        jRadioButtonAreaChart.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRadioButtonAreaChartStateChanged(evt);
            }
        });
        jMenuTypeOfCharts.add(jRadioButtonAreaChart);

        jMenuCharts.add(jMenuTypeOfCharts);

        jMenuSettings.add(jMenuCharts);

        jMenuBar.add(jMenuSettings);

        setJMenuBar(jMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4Chart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4Chart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItemOpenAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenAppActionPerformed
        formConnectTo.setVisible(true);
    }//GEN-LAST:event_jMenuItemOpenAppActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jMenuItemOpenResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemOpenResultsActionPerformed
        resultsChooser.setDialogTitle("Open Results...");
        int ret = resultsChooser.showOpenDialog(this);
        if(ret != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File resultsFile = resultsChooser.getSelectedFile();
        if(resultsFile == null || !resultsFile.exists()) {
            return;
        }
        this.setTitle(resultsFile.getPath());
        clearChart();
        ViewerThread viewerThread = new ViewerThread(this, resultsFile.getAbsolutePath());
        WaitBox threadWaitBox = new WaitBox("Reading file...");
        threadWaitBox.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        threadWaitBox.setVisible(true);
        threadWaitBox.start(viewerThread);
    }//GEN-LAST:event_jMenuItemOpenResultsActionPerformed

    private void jMenuItemCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCloseActionPerformed
        this.setTitle(Help.DEFAULT_MAIN_FORM_TITLE);
        clearChart();
    }//GEN-LAST:event_jMenuItemCloseActionPerformed

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        if(chart != null) {
            chart.setSize(jPanel4Chart.getSize());
        }
    }//GEN-LAST:event_formComponentResized

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        deleteTmpResultsFile();
        formConnectTo.setVisible(false);
        formConnectTo.dispose();
        this.setVisible(false);
        this.dispose();
        if(pinServerProcess != null) {
            pinServerProcess.destroy();
        }
        System.exit(0);
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItemSaveBinFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemSaveBinFileActionPerformed
        if(tmpResultsFileName == null || !Files.exists(Paths.get(tmpResultsFileName))) {
            new MsgBox(this, "Notification", "No data to save!",
                MsgBox.ACTION_OK).setVisible(true);
            return;
        }
        resultsChooser.setDialogTitle("Save Results...");
        int ret = resultsChooser.showSaveDialog(this);
        if(ret != JFileChooser.APPROVE_OPTION) {
            return;
        }
        File resultsFile = resultsChooser.getSelectedFile();
        if(resultsFile != null) {
            try {
                String resultsAbsPath = resultsFile.getAbsolutePath().replace(
                        Help.GetBinaryFileExtension(), "") + Help.GetBinaryFileExtension();
                Files.deleteIfExists(Paths.get(resultsAbsPath));
                Files.move(Paths.get(tmpResultsFileName), Paths.get(resultsAbsPath));
                tmpResultsFileName = null;
            } catch (IOException ex) {
                new MsgBox(this, "Error!", "Unable to save data!",
                    MsgBox.ACTION_OK).setVisible(true);
            }
        }        
    }//GEN-LAST:event_jMenuItemSaveBinFileActionPerformed

    private void jRadioButtonTimelineMode1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonTimelineMode1StateChanged
        if(jRadioButtonTimelineMode1.isSelected())
        {
            GlobalVariables.g_TimelinePeriodMilisec = 60000;
            jRadioButtonTimelineMode1.setEnabled(false);
            jRadioButtonTimelineMode2.setSelected(false);
            jRadioButtonTimelineMode2.setEnabled(true);
            jRadioButtonTimelineMode3.setSelected(false);
            jRadioButtonTimelineMode3.setEnabled(true);
            jRadioButtonTimelineMode4.setSelected(false);
            jRadioButtonTimelineMode4.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonTimelineMode1StateChanged

    private void jRadioButtonTimelineMode2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonTimelineMode2StateChanged
        if(jRadioButtonTimelineMode2.isSelected())
        {
            GlobalVariables.g_TimelinePeriodMilisec = 120000;
            jRadioButtonTimelineMode2.setEnabled(false);
            jRadioButtonTimelineMode1.setSelected(false);
            jRadioButtonTimelineMode1.setEnabled(true);
            jRadioButtonTimelineMode3.setSelected(false);
            jRadioButtonTimelineMode3.setEnabled(true);
            jRadioButtonTimelineMode4.setSelected(false);
            jRadioButtonTimelineMode4.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonTimelineMode2StateChanged

    private void jRadioButtonTimelineMode3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonTimelineMode3StateChanged
        if(jRadioButtonTimelineMode3.isSelected())
        {
            GlobalVariables.g_TimelinePeriodMilisec = 300000;
            jRadioButtonTimelineMode3.setEnabled(false);
            jRadioButtonTimelineMode1.setSelected(false);
            jRadioButtonTimelineMode1.setEnabled(true);
            jRadioButtonTimelineMode2.setSelected(false);
            jRadioButtonTimelineMode2.setEnabled(true);
            jRadioButtonTimelineMode4.setSelected(false);
            jRadioButtonTimelineMode4.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonTimelineMode3StateChanged

    private void jRadioButtonTwoChartsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonTwoChartsStateChanged
        if(jRadioButtonTwoCharts.isSelected())
        {
            GlobalVariables.g_TwoChartsAreActivated = true;
            jRadioButtonTwoCharts.setEnabled(false);
            jRadioButtonOneChart.setSelected(false);
            jRadioButtonOneChart.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonTwoChartsStateChanged

    private void jRadioButtonOneChartStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonOneChartStateChanged
        if(jRadioButtonOneChart.isSelected())
        {
            GlobalVariables.g_TwoChartsAreActivated = false;
            jRadioButtonOneChart.setEnabled(false);
            jRadioButtonTwoCharts.setSelected(false);
            jRadioButtonTwoCharts.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonOneChartStateChanged

    private void jRadioButtonTimelineMode4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonTimelineMode4StateChanged
        if(jRadioButtonTimelineMode4.isSelected())
        {
            GlobalVariables.g_TimelinePeriodMilisec = Integer.MAX_VALUE;
            jRadioButtonTimelineMode4.setEnabled(false);
            jRadioButtonTimelineMode1.setSelected(false);
            jRadioButtonTimelineMode1.setEnabled(true);
            jRadioButtonTimelineMode2.setSelected(false);
            jRadioButtonTimelineMode2.setEnabled(true);
            jRadioButtonTimelineMode3.setSelected(false);
            jRadioButtonTimelineMode3.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonTimelineMode4StateChanged

    private void jRadioButtonLineChartStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonLineChartStateChanged
        if(jRadioButtonLineChart.isSelected())
        {
            GlobalVariables.g_ChartsAreaFlag = false;
            jRadioButtonLineChart.setEnabled(false);
            jRadioButtonAreaChart.setSelected(false);
            jRadioButtonAreaChart.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonLineChartStateChanged

    private void jRadioButtonAreaChartStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRadioButtonAreaChartStateChanged
        if(jRadioButtonAreaChart.isSelected())
        {
            GlobalVariables.g_ChartsAreaFlag = false;
            jRadioButtonAreaChart.setEnabled(false);
            jRadioButtonLineChart.setSelected(false);
            jRadioButtonLineChart.setEnabled(true);
        }
    }//GEN-LAST:event_jRadioButtonAreaChartStateChanged

    // Private variables
    private final FormConnectTo formConnectTo;
    private Process pinServerProcess;
    private JFileChooser resultsChooser;
    private FastChart chart;
    private String tmpResultsFileName;
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenu jMenuCharts;
    private javax.swing.JMenu jMenuFile;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemClose;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JMenuItem jMenuItemOpenApp;
    private javax.swing.JMenuItem jMenuItemOpenResults;
    private javax.swing.JMenuItem jMenuItemSaveBinFile;
    private javax.swing.JMenu jMenuNumberOfCharts;
    private javax.swing.JMenu jMenuSettings;
    private javax.swing.JMenu jMenuTimeline;
    private javax.swing.JMenu jMenuTypeOfCharts;
    private javax.swing.JPanel jPanel4Chart;
    private javax.swing.JRadioButtonMenuItem jRadioButtonAreaChart;
    private javax.swing.JRadioButtonMenuItem jRadioButtonLineChart;
    private javax.swing.JRadioButtonMenuItem jRadioButtonOneChart;
    private javax.swing.JRadioButtonMenuItem jRadioButtonTimelineMode1;
    private javax.swing.JRadioButtonMenuItem jRadioButtonTimelineMode2;
    private javax.swing.JRadioButtonMenuItem jRadioButtonTimelineMode3;
    private javax.swing.JRadioButtonMenuItem jRadioButtonTimelineMode4;
    private javax.swing.JRadioButtonMenuItem jRadioButtonTwoCharts;
    // End of variables declaration//GEN-END:variables
}
